// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER
  ADMIN
  USER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]

  @@map("categories")
}

model Product {
  id             String        @id @default(uuid())
  name           String
  slug           String        @unique
  description    String?
  price          Float
  cost           Float         @default(0)
  compareAtPrice Float?
  stock          Int           @default(0)
  status         ProductStatus @default(ACTIVE)
  images         String[]      @default([])
  sku            String?       @unique
  featured       Boolean       @default(false)

  category       Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String

  createdBy      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  sales          Sale[]
  orderItems     OrderItem[]
  reviews        Review[]

  @@map("products")
}

model Sale {
  id         String   @id @default(uuid())
  quantity   Int
  totalPrice Float
  saleDate   DateTime @default(now())

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String

  @@map("sales")
}

model Order {
  id             String      @id @default(uuid())
  orderNumber    String      @unique
  status         OrderStatus @default(PENDING)
  total          Float

  // Shipping address
  shippingStreet     String
  shippingCity       String
  shippingState      String
  shippingPostalCode String
  shippingCountry    String

  customer   User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String

  items      OrderItem[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("order_items")
}

model Review {
  id         String       @id @default(uuid())
  rating     Int          // 1-5
  comment    String
  status     ReviewStatus @default(PENDING)

  product    Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String

  customer   User         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("reviews")
}
